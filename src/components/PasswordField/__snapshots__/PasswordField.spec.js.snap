// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<PasswordField /> matches the snapshot 1`] = `
<WithStyles(PasswordField)
  label="Label"
  name="pass"
  variant="outlined"
>
  <PasswordField
    buttonDisabled={false}
    classes={
      Object {
        "input": "PasswordField-input-2",
        "root": "PasswordField-root-1",
      }
    }
    label="Label"
    name="pass"
    variant="outlined"
    visible={false}
  >
    <TextField
      InputProps={
        Object {
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(IconButton)
              disabled={false}
              onClick={[Function]}
              onMouseDown={[Function]}
            >
              <WithStyles(ToggleIcon)
                offIcon={<pure(VisibilityOffIcon) />}
                on={false}
                onIcon={<pure(VisibilityIcon) />}
              />
            </WithStyles(IconButton)>
          </WithStyles(InputAdornment)>,
        }
      }
      label="Label"
      name="pass"
      required={false}
      select={false}
      type="password"
      variant="outlined"
    >
      <WithStyles(FormControl)
        required={false}
        variant="outlined"
      >
        <FormControl
          classes={
            Object {
              "fullWidth": "MuiFormControl-fullWidth-6",
              "marginDense": "MuiFormControl-marginDense-5",
              "marginNormal": "MuiFormControl-marginNormal-4",
              "root": "MuiFormControl-root-3",
            }
          }
          component="div"
          disabled={false}
          error={false}
          fullWidth={false}
          margin="none"
          required={false}
          variant="outlined"
        >
          <div
            className="MuiFormControl-root-3"
          >
            <WithStyles(WithFormControlContext(InputLabel))>
              <WithFormControlContext(InputLabel)
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated-15",
                    "disabled": "MuiInputLabel-disabled-9",
                    "error": "MuiInputLabel-error-10",
                    "filled": "MuiInputLabel-filled-16",
                    "focused": "MuiInputLabel-focused-8",
                    "formControl": "MuiInputLabel-formControl-12",
                    "marginDense": "MuiInputLabel-marginDense-13",
                    "outlined": "MuiInputLabel-outlined-17",
                    "required": "MuiInputLabel-required-11",
                    "root": "MuiInputLabel-root-7",
                    "shrink": "MuiInputLabel-shrink-14",
                  }
                }
              >
                <InputLabel
                  classes={
                    Object {
                      "animated": "MuiInputLabel-animated-15",
                      "disabled": "MuiInputLabel-disabled-9",
                      "error": "MuiInputLabel-error-10",
                      "filled": "MuiInputLabel-filled-16",
                      "focused": "MuiInputLabel-focused-8",
                      "formControl": "MuiInputLabel-formControl-12",
                      "marginDense": "MuiInputLabel-marginDense-13",
                      "outlined": "MuiInputLabel-outlined-17",
                      "required": "MuiInputLabel-required-11",
                      "root": "MuiInputLabel-root-7",
                      "shrink": "MuiInputLabel-shrink-14",
                    }
                  }
                  disableAnimation={false}
                  muiFormControl={
                    Object {
                      "adornedStart": false,
                      "disabled": false,
                      "error": false,
                      "filled": false,
                      "focused": false,
                      "margin": "none",
                      "onBlur": [Function],
                      "onEmpty": [Function],
                      "onFilled": [Function],
                      "onFocus": [Function],
                      "required": false,
                      "variant": "outlined",
                    }
                  }
                >
                  <WithStyles(WithFormControlContext(FormLabel))
                    className="MuiInputLabel-root-7 MuiInputLabel-formControl-12 MuiInputLabel-animated-15 MuiInputLabel-outlined-17"
                    classes={
                      Object {
                        "disabled": "MuiInputLabel-disabled-9",
                        "error": "MuiInputLabel-error-10",
                        "focused": "MuiInputLabel-focused-8",
                        "required": "MuiInputLabel-required-11",
                      }
                    }
                    data-shrink={false}
                  >
                    <WithFormControlContext(FormLabel)
                      className="MuiInputLabel-root-7 MuiInputLabel-formControl-12 MuiInputLabel-animated-15 MuiInputLabel-outlined-17"
                      classes={
                        Object {
                          "asterisk": "MuiFormLabel-asterisk-24",
                          "disabled": "MuiFormLabel-disabled-20 MuiInputLabel-disabled-9",
                          "error": "MuiFormLabel-error-21 MuiInputLabel-error-10",
                          "filled": "MuiFormLabel-filled-22",
                          "focused": "MuiFormLabel-focused-19 MuiInputLabel-focused-8",
                          "required": "MuiFormLabel-required-23 MuiInputLabel-required-11",
                          "root": "MuiFormLabel-root-18",
                        }
                      }
                      data-shrink={false}
                    >
                      <FormLabel
                        className="MuiInputLabel-root-7 MuiInputLabel-formControl-12 MuiInputLabel-animated-15 MuiInputLabel-outlined-17"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk-24",
                            "disabled": "MuiFormLabel-disabled-20 MuiInputLabel-disabled-9",
                            "error": "MuiFormLabel-error-21 MuiInputLabel-error-10",
                            "filled": "MuiFormLabel-filled-22",
                            "focused": "MuiFormLabel-focused-19 MuiInputLabel-focused-8",
                            "required": "MuiFormLabel-required-23 MuiInputLabel-required-11",
                            "root": "MuiFormLabel-root-18",
                          }
                        }
                        component="label"
                        data-shrink={false}
                        muiFormControl={
                          Object {
                            "adornedStart": false,
                            "disabled": false,
                            "error": false,
                            "filled": false,
                            "focused": false,
                            "margin": "none",
                            "onBlur": [Function],
                            "onEmpty": [Function],
                            "onFilled": [Function],
                            "onFocus": [Function],
                            "required": false,
                            "variant": "outlined",
                          }
                        }
                      >
                        <label
                          className="MuiFormLabel-root-18 MuiInputLabel-root-7 MuiInputLabel-formControl-12 MuiInputLabel-animated-15 MuiInputLabel-outlined-17"
                          data-shrink={false}
                        >
                          Label
                        </label>
                      </FormLabel>
                    </WithFormControlContext(FormLabel)>
                  </WithStyles(WithFormControlContext(FormLabel))>
                </InputLabel>
              </WithFormControlContext(InputLabel)>
            </WithStyles(WithFormControlContext(InputLabel))>
            <WithStyles(OutlinedInput)
              endAdornment={
                <WithStyles(InputAdornment)
                  position="end"
                >
                  <WithStyles(IconButton)
                    disabled={false}
                    onClick={[Function]}
                    onMouseDown={[Function]}
                  >
                    <WithStyles(ToggleIcon)
                      offIcon={<pure(VisibilityOffIcon) />}
                      on={false}
                      onIcon={<pure(VisibilityIcon) />}
                    />
                  </WithStyles(IconButton)>
                </WithStyles(InputAdornment)>
              }
              labelWidth={0}
              name="pass"
              type="password"
            >
              <OutlinedInput
                classes={
                  Object {
                    "adornedEnd": "MuiOutlinedInput-adornedEnd-29",
                    "adornedStart": "MuiOutlinedInput-adornedStart-28",
                    "disabled": "MuiOutlinedInput-disabled-27",
                    "error": "MuiOutlinedInput-error-30",
                    "focused": "MuiOutlinedInput-focused-26",
                    "input": "MuiOutlinedInput-input-33",
                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd-37",
                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart-36",
                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense-34",
                    "inputMultiline": "MuiOutlinedInput-inputMultiline-35",
                    "multiline": "MuiOutlinedInput-multiline-31",
                    "notchedOutline": "MuiOutlinedInput-notchedOutline-32",
                    "root": "MuiOutlinedInput-root-25",
                  }
                }
                endAdornment={
                  <WithStyles(InputAdornment)
                    position="end"
                  >
                    <WithStyles(IconButton)
                      disabled={false}
                      onClick={[Function]}
                      onMouseDown={[Function]}
                    >
                      <WithStyles(ToggleIcon)
                        offIcon={<pure(VisibilityOffIcon) />}
                        on={false}
                        onIcon={<pure(VisibilityIcon) />}
                      />
                    </WithStyles(IconButton)>
                  </WithStyles(InputAdornment)>
                }
                labelWidth={0}
                name="pass"
                type="password"
              >
                <WithStyles(WithFormControlContext(InputBase))
                  classes={
                    Object {
                      "adornedEnd": "MuiOutlinedInput-adornedEnd-29",
                      "adornedStart": "MuiOutlinedInput-adornedStart-28",
                      "disabled": "MuiOutlinedInput-disabled-27",
                      "error": "MuiOutlinedInput-error-30",
                      "focused": "MuiOutlinedInput-focused-26",
                      "input": "MuiOutlinedInput-input-33",
                      "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd-37",
                      "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart-36",
                      "inputMarginDense": "MuiOutlinedInput-inputMarginDense-34",
                      "inputMultiline": "MuiOutlinedInput-inputMultiline-35",
                      "multiline": "MuiOutlinedInput-multiline-31",
                      "notchedOutline": null,
                      "root": "MuiOutlinedInput-root-25",
                    }
                  }
                  endAdornment={
                    <WithStyles(InputAdornment)
                      position="end"
                    >
                      <WithStyles(IconButton)
                        disabled={false}
                        onClick={[Function]}
                        onMouseDown={[Function]}
                      >
                        <WithStyles(ToggleIcon)
                          offIcon={<pure(VisibilityOffIcon) />}
                          on={false}
                          onIcon={<pure(VisibilityIcon) />}
                        />
                      </WithStyles(IconButton)>
                    </WithStyles(InputAdornment)>
                  }
                  fullWidth={false}
                  inputComponent="input"
                  multiline={false}
                  name="pass"
                  renderPrefix={[Function]}
                  type="password"
                >
                  <WithFormControlContext(InputBase)
                    classes={
                      Object {
                        "adornedEnd": "MuiInputBase-adornedEnd-43 MuiOutlinedInput-adornedEnd-29",
                        "adornedStart": "MuiInputBase-adornedStart-42 MuiOutlinedInput-adornedStart-28",
                        "disabled": "MuiInputBase-disabled-41 MuiOutlinedInput-disabled-27",
                        "error": "MuiInputBase-error-44 MuiOutlinedInput-error-30",
                        "focused": "MuiInputBase-focused-40 MuiOutlinedInput-focused-26",
                        "formControl": "MuiInputBase-formControl-39",
                        "fullWidth": "MuiInputBase-fullWidth-47",
                        "input": "MuiInputBase-input-48 MuiOutlinedInput-input-33",
                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-54 MuiOutlinedInput-inputAdornedEnd-37",
                        "inputAdornedStart": "MuiInputBase-inputAdornedStart-53 MuiOutlinedInput-inputAdornedStart-36",
                        "inputMarginDense": "MuiInputBase-inputMarginDense-49 MuiOutlinedInput-inputMarginDense-34",
                        "inputMultiline": "MuiInputBase-inputMultiline-50 MuiOutlinedInput-inputMultiline-35",
                        "inputType": "MuiInputBase-inputType-51",
                        "inputTypeSearch": "MuiInputBase-inputTypeSearch-52",
                        "marginDense": "MuiInputBase-marginDense-45",
                        "multiline": "MuiInputBase-multiline-46 MuiOutlinedInput-multiline-31",
                        "root": "MuiInputBase-root-38 MuiOutlinedInput-root-25",
                      }
                    }
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          disabled={false}
                          onClick={[Function]}
                          onMouseDown={[Function]}
                        >
                          <WithStyles(ToggleIcon)
                            offIcon={<pure(VisibilityOffIcon) />}
                            on={false}
                            onIcon={<pure(VisibilityIcon) />}
                          />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    fullWidth={false}
                    inputComponent="input"
                    multiline={false}
                    name="pass"
                    renderPrefix={[Function]}
                    type="password"
                  >
                    <InputBase
                      classes={
                        Object {
                          "adornedEnd": "MuiInputBase-adornedEnd-43 MuiOutlinedInput-adornedEnd-29",
                          "adornedStart": "MuiInputBase-adornedStart-42 MuiOutlinedInput-adornedStart-28",
                          "disabled": "MuiInputBase-disabled-41 MuiOutlinedInput-disabled-27",
                          "error": "MuiInputBase-error-44 MuiOutlinedInput-error-30",
                          "focused": "MuiInputBase-focused-40 MuiOutlinedInput-focused-26",
                          "formControl": "MuiInputBase-formControl-39",
                          "fullWidth": "MuiInputBase-fullWidth-47",
                          "input": "MuiInputBase-input-48 MuiOutlinedInput-input-33",
                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-54 MuiOutlinedInput-inputAdornedEnd-37",
                          "inputAdornedStart": "MuiInputBase-inputAdornedStart-53 MuiOutlinedInput-inputAdornedStart-36",
                          "inputMarginDense": "MuiInputBase-inputMarginDense-49 MuiOutlinedInput-inputMarginDense-34",
                          "inputMultiline": "MuiInputBase-inputMultiline-50 MuiOutlinedInput-inputMultiline-35",
                          "inputType": "MuiInputBase-inputType-51",
                          "inputTypeSearch": "MuiInputBase-inputTypeSearch-52",
                          "marginDense": "MuiInputBase-marginDense-45",
                          "multiline": "MuiInputBase-multiline-46 MuiOutlinedInput-multiline-31",
                          "root": "MuiInputBase-root-38 MuiOutlinedInput-root-25",
                        }
                      }
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            disabled={false}
                            onClick={[Function]}
                            onMouseDown={[Function]}
                          >
                            <WithStyles(ToggleIcon)
                              offIcon={<pure(VisibilityOffIcon) />}
                              on={false}
                              onIcon={<pure(VisibilityIcon) />}
                            />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      fullWidth={false}
                      inputComponent="input"
                      muiFormControl={
                        Object {
                          "adornedStart": false,
                          "disabled": false,
                          "error": false,
                          "filled": false,
                          "focused": false,
                          "margin": "none",
                          "onBlur": [Function],
                          "onEmpty": [Function],
                          "onFilled": [Function],
                          "onFocus": [Function],
                          "required": false,
                          "variant": "outlined",
                        }
                      }
                      multiline={false}
                      name="pass"
                      renderPrefix={[Function]}
                      type="password"
                    >
                      <div
                        className="MuiInputBase-root-38 MuiOutlinedInput-root-25 MuiInputBase-formControl-39 MuiInputBase-adornedEnd-43 MuiOutlinedInput-adornedEnd-29"
                        onClick={[Function]}
                      >
                        <WithStyles(NotchedOutline)
                          className="MuiOutlinedInput-notchedOutline-32"
                          labelWidth={0}
                          notched={false}
                        >
                          <NotchedOutline
                            className="MuiOutlinedInput-notchedOutline-32"
                            classes={
                              Object {
                                "legend": "MuiPrivateNotchedOutline-legend-56",
                                "root": "MuiPrivateNotchedOutline-root-55",
                              }
                            }
                            labelWidth={0}
                            notched={false}
                            theme={
                              Object {
                                "breakpoints": Object {
                                  "between": [Function],
                                  "down": [Function],
                                  "keys": Array [
                                    "xs",
                                    "sm",
                                    "md",
                                    "lg",
                                    "xl",
                                  ],
                                  "only": [Function],
                                  "up": [Function],
                                  "values": Object {
                                    "lg": 1280,
                                    "md": 960,
                                    "sm": 600,
                                    "xl": 1920,
                                    "xs": 0,
                                  },
                                  "width": [Function],
                                },
                                "direction": "ltr",
                                "mixins": Object {
                                  "gutters": [Function],
                                  "toolbar": Object {
                                    "@media (min-width:0px) and (orientation: landscape)": Object {
                                      "minHeight": 48,
                                    },
                                    "@media (min-width:600px)": Object {
                                      "minHeight": 64,
                                    },
                                    "minHeight": 56,
                                  },
                                },
                                "overrides": Object {},
                                "palette": Object {
                                  "action": Object {
                                    "active": "rgba(0, 0, 0, 0.54)",
                                    "disabled": "rgba(0, 0, 0, 0.26)",
                                    "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                    "hover": "rgba(0, 0, 0, 0.08)",
                                    "hoverOpacity": 0.08,
                                    "selected": "rgba(0, 0, 0, 0.14)",
                                  },
                                  "augmentColor": [Function],
                                  "background": Object {
                                    "default": "#fafafa",
                                    "paper": "#fff",
                                  },
                                  "common": Object {
                                    "black": "#000",
                                    "white": "#fff",
                                  },
                                  "contrastThreshold": 3,
                                  "divider": "rgba(0, 0, 0, 0.12)",
                                  "error": Object {
                                    "contrastText": "#fff",
                                    "dark": "#d32f2f",
                                    "light": "#e57373",
                                    "main": "#f44336",
                                  },
                                  "getContrastText": [Function],
                                  "grey": Object {
                                    "100": "#f5f5f5",
                                    "200": "#eeeeee",
                                    "300": "#e0e0e0",
                                    "400": "#bdbdbd",
                                    "50": "#fafafa",
                                    "500": "#9e9e9e",
                                    "600": "#757575",
                                    "700": "#616161",
                                    "800": "#424242",
                                    "900": "#212121",
                                    "A100": "#d5d5d5",
                                    "A200": "#aaaaaa",
                                    "A400": "#303030",
                                    "A700": "#616161",
                                  },
                                  "primary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#303f9f",
                                    "light": "#7986cb",
                                    "main": "#3f51b5",
                                  },
                                  "secondary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#c51162",
                                    "light": "#ff4081",
                                    "main": "#f50057",
                                  },
                                  "text": Object {
                                    "disabled": "rgba(0, 0, 0, 0.38)",
                                    "hint": "rgba(0, 0, 0, 0.38)",
                                    "primary": "rgba(0, 0, 0, 0.87)",
                                    "secondary": "rgba(0, 0, 0, 0.54)",
                                  },
                                  "tonalOffset": 0.2,
                                  "type": "light",
                                },
                                "props": Object {},
                                "shadows": Array [
                                  "none",
                                  "0px 1px 3px 0px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 2px 1px -1px rgba(0,0,0,0.12)",
                                  "0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12)",
                                  "0px 1px 8px 0px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 3px 3px -2px rgba(0,0,0,0.12)",
                                  "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                  "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                  "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                  "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                  "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                  "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                  "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                  "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                  "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                  "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                  "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                  "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                  "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                  "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                  "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                  "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                  "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                  "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                  "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                  "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                  "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                ],
                                "shape": Object {
                                  "borderRadius": 4,
                                },
                                "spacing": Object {
                                  "unit": 8,
                                },
                                "transitions": Object {
                                  "create": [Function],
                                  "duration": Object {
                                    "complex": 375,
                                    "enteringScreen": 225,
                                    "leavingScreen": 195,
                                    "short": 250,
                                    "shorter": 200,
                                    "shortest": 150,
                                    "standard": 300,
                                  },
                                  "easing": Object {
                                    "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                    "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                    "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                    "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                  },
                                  "getAutoHeightDuration": [Function],
                                },
                                "typography": Object {
                                  "body1": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.00938em",
                                    "lineHeight": 1.5,
                                  },
                                  "body1Next": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.00938em",
                                    "lineHeight": 1.5,
                                  },
                                  "body2": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.875rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.01071em",
                                    "lineHeight": 1.5,
                                  },
                                  "body2Next": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.875rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.01071em",
                                    "lineHeight": 1.5,
                                  },
                                  "button": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.875rem",
                                    "fontWeight": 500,
                                    "letterSpacing": "0.02857em",
                                    "lineHeight": 1.75,
                                    "textTransform": "uppercase",
                                  },
                                  "buttonNext": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.875rem",
                                    "fontWeight": 500,
                                    "letterSpacing": "0.02857em",
                                    "lineHeight": 1.75,
                                    "textTransform": "uppercase",
                                  },
                                  "caption": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.75rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.03333em",
                                    "lineHeight": 1.66,
                                  },
                                  "captionNext": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.75rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.03333em",
                                    "lineHeight": 1.66,
                                  },
                                  "display1": Object {
                                    "color": "rgba(0, 0, 0, 0.54)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "2.125rem",
                                    "fontWeight": 400,
                                    "lineHeight": "1.20588em",
                                  },
                                  "display2": Object {
                                    "color": "rgba(0, 0, 0, 0.54)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "2.8125rem",
                                    "fontWeight": 400,
                                    "lineHeight": "1.13333em",
                                    "marginLeft": "-.02em",
                                  },
                                  "display3": Object {
                                    "color": "rgba(0, 0, 0, 0.54)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "3.5rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "-.02em",
                                    "lineHeight": "1.30357em",
                                    "marginLeft": "-.02em",
                                  },
                                  "display4": Object {
                                    "color": "rgba(0, 0, 0, 0.54)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "7rem",
                                    "fontWeight": 300,
                                    "letterSpacing": "-.04em",
                                    "lineHeight": "1.14286em",
                                    "marginLeft": "-.04em",
                                  },
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": 14,
                                  "fontWeightLight": 300,
                                  "fontWeightMedium": 500,
                                  "fontWeightRegular": 400,
                                  "h1": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "6rem",
                                    "fontWeight": 300,
                                    "letterSpacing": "-0.01562em",
                                    "lineHeight": 1,
                                  },
                                  "h2": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "3.75rem",
                                    "fontWeight": 300,
                                    "letterSpacing": "-0.00833em",
                                    "lineHeight": 1,
                                  },
                                  "h3": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "3rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0em",
                                    "lineHeight": 1.04,
                                  },
                                  "h4": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "2.125rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.00735em",
                                    "lineHeight": 1.17,
                                  },
                                  "h5": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1.5rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0em",
                                    "lineHeight": 1.33,
                                  },
                                  "h6": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1.25rem",
                                    "fontWeight": 500,
                                    "letterSpacing": "0.0075em",
                                    "lineHeight": 1.6,
                                  },
                                  "headline": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1.5rem",
                                    "fontWeight": 400,
                                    "lineHeight": "1.35417em",
                                  },
                                  "overline": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.75rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.08333em",
                                    "lineHeight": 2.66,
                                    "textTransform": "uppercase",
                                  },
                                  "pxToRem": [Function],
                                  "round": [Function],
                                  "subheading": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1rem",
                                    "fontWeight": 400,
                                    "lineHeight": "1.5em",
                                  },
                                  "subtitle1": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.00938em",
                                    "lineHeight": 1.75,
                                  },
                                  "subtitle2": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.875rem",
                                    "fontWeight": 500,
                                    "letterSpacing": "0.00714em",
                                    "lineHeight": 1.57,
                                  },
                                  "title": Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1.3125rem",
                                    "fontWeight": 500,
                                    "lineHeight": "1.16667em",
                                  },
                                  "useNextVariants": true,
                                },
                                "zIndex": Object {
                                  "appBar": 1100,
                                  "drawer": 1200,
                                  "mobileStepper": 1000,
                                  "modal": 1300,
                                  "snackbar": 1400,
                                  "tooltip": 1500,
                                },
                              }
                            }
                          >
                            <fieldset
                              aria-hidden={true}
                              className="MuiPrivateNotchedOutline-root-55 MuiOutlinedInput-notchedOutline-32"
                              style={
                                Object {
                                  "paddingLeft": 8,
                                }
                              }
                            >
                              <legend
                                className="MuiPrivateNotchedOutline-legend-56"
                                style={
                                  Object {
                                    "width": 0.01,
                                  }
                                }
                              >
                                <span
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "&#8203;",
                                    }
                                  }
                                />
                              </legend>
                            </fieldset>
                          </NotchedOutline>
                        </WithStyles(NotchedOutline)>
                        <input
                          aria-invalid={false}
                          className="MuiInputBase-input-48 MuiOutlinedInput-input-33 MuiInputBase-inputType-51 MuiInputBase-inputAdornedEnd-54 MuiOutlinedInput-inputAdornedEnd-37"
                          disabled={false}
                          name="pass"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          required={false}
                          type="password"
                        />
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <InputAdornment
                            classes={
                              Object {
                                "disablePointerEvents": "MuiInputAdornment-disablePointerEvents-61",
                                "filled": "MuiInputAdornment-filled-58",
                                "positionEnd": "MuiInputAdornment-positionEnd-60",
                                "positionStart": "MuiInputAdornment-positionStart-59",
                                "root": "MuiInputAdornment-root-57",
                              }
                            }
                            component="div"
                            disablePointerEvents={false}
                            disableTypography={false}
                            position="end"
                          >
                            <div
                              className="MuiInputAdornment-root-57 MuiInputAdornment-positionEnd-60"
                            >
                              <WithStyles(IconButton)
                                disabled={false}
                                onClick={[Function]}
                                onMouseDown={[Function]}
                              >
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-63",
                                      "colorPrimary": "MuiIconButton-colorPrimary-64",
                                      "colorSecondary": "MuiIconButton-colorSecondary-65",
                                      "disabled": "MuiIconButton-disabled-66",
                                      "label": "MuiIconButton-label-67",
                                      "root": "MuiIconButton-root-62",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                  onClick={[Function]}
                                  onMouseDown={[Function]}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-62"
                                    disabled={false}
                                    focusRipple={true}
                                    onClick={[Function]}
                                    onMouseDown={[Function]}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-62"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-69",
                                          "focusVisible": "MuiButtonBase-focusVisible-70",
                                          "root": "MuiButtonBase-root-68",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      onClick={[Function]}
                                      onMouseDown={[Function]}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-68 MuiIconButton-root-62"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-67"
                                        >
                                          <WithStyles(ToggleIcon)
                                            offIcon={<pure(VisibilityOffIcon) />}
                                            on={false}
                                            onIcon={<pure(VisibilityIcon) />}
                                          >
                                            <ToggleIcon
                                              classes={
                                                Object {
                                                  "offIcon": "ToggleIcon-offIcon-72",
                                                  "onIcon": "ToggleIcon-onIcon-73",
                                                  "root": "ToggleIcon-root-71",
                                                }
                                              }
                                              offIcon={<pure(VisibilityOffIcon) />}
                                              on={false}
                                              onIcon={<pure(VisibilityIcon) />}
                                            >
                                              <div
                                                className="ToggleIcon-root-71"
                                              >
                                                <pure(VisibilityOffIcon)
                                                  className="ToggleIcon-offIcon-72"
                                                  style={
                                                    Object {
                                                      "WebkitClipPath": "polygon(0% 200%, 0% 0%, 200% 0%)",
                                                      "clipPath": "polygon(0% 200%, 0% 0%, 200% 0%)",
                                                      "visibility": "visible",
                                                    }
                                                  }
                                                >
                                                  <VisibilityOffIcon
                                                    className="ToggleIcon-offIcon-72"
                                                    style={
                                                      Object {
                                                        "WebkitClipPath": "polygon(0% 200%, 0% 0%, 200% 0%)",
                                                        "clipPath": "polygon(0% 200%, 0% 0%, 200% 0%)",
                                                        "visibility": "visible",
                                                      }
                                                    }
                                                  >
                                                    <WithStyles(SvgIcon)
                                                      className="ToggleIcon-offIcon-72"
                                                      style={
                                                        Object {
                                                          "WebkitClipPath": "polygon(0% 200%, 0% 0%, 200% 0%)",
                                                          "clipPath": "polygon(0% 200%, 0% 0%, 200% 0%)",
                                                          "visibility": "visible",
                                                        }
                                                      }
                                                    >
                                                      <SvgIcon
                                                        className="ToggleIcon-offIcon-72"
                                                        classes={
                                                          Object {
                                                            "colorAction": "MuiSvgIcon-colorAction-77",
                                                            "colorDisabled": "MuiSvgIcon-colorDisabled-79",
                                                            "colorError": "MuiSvgIcon-colorError-78",
                                                            "colorPrimary": "MuiSvgIcon-colorPrimary-75",
                                                            "colorSecondary": "MuiSvgIcon-colorSecondary-76",
                                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-80",
                                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-82",
                                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-81",
                                                            "root": "MuiSvgIcon-root-74",
                                                          }
                                                        }
                                                        color="inherit"
                                                        component="svg"
                                                        fontSize="default"
                                                        style={
                                                          Object {
                                                            "WebkitClipPath": "polygon(0% 200%, 0% 0%, 200% 0%)",
                                                            "clipPath": "polygon(0% 200%, 0% 0%, 200% 0%)",
                                                            "visibility": "visible",
                                                          }
                                                        }
                                                        viewBox="0 0 24 24"
                                                      >
                                                        <svg
                                                          aria-hidden="true"
                                                          className="MuiSvgIcon-root-74 ToggleIcon-offIcon-72"
                                                          focusable="false"
                                                          role="presentation"
                                                          style={
                                                            Object {
                                                              "WebkitClipPath": "polygon(0% 200%, 0% 0%, 200% 0%)",
                                                              "clipPath": "polygon(0% 200%, 0% 0%, 200% 0%)",
                                                              "visibility": "visible",
                                                            }
                                                          }
                                                          viewBox="0 0 24 24"
                                                        >
                                                          <path
                                                            d="M0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0z"
                                                            fill="none"
                                                          />
                                                          <path
                                                            d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
                                                          />
                                                        </svg>
                                                      </SvgIcon>
                                                    </WithStyles(SvgIcon)>
                                                  </VisibilityOffIcon>
                                                </pure(VisibilityOffIcon)>
                                                <pure(VisibilityIcon)
                                                  className="ToggleIcon-onIcon-73"
                                                  style={
                                                    Object {
                                                      "WebkitClipPath": "polygon(100% 100%, 100% 100%, 100% 100%)",
                                                      "clipPath": "polygon(100% 100%, 100% 100%, 100% 100%)",
                                                      "visibility": "hidden",
                                                    }
                                                  }
                                                >
                                                  <VisibilityIcon
                                                    className="ToggleIcon-onIcon-73"
                                                    style={
                                                      Object {
                                                        "WebkitClipPath": "polygon(100% 100%, 100% 100%, 100% 100%)",
                                                        "clipPath": "polygon(100% 100%, 100% 100%, 100% 100%)",
                                                        "visibility": "hidden",
                                                      }
                                                    }
                                                  >
                                                    <WithStyles(SvgIcon)
                                                      className="ToggleIcon-onIcon-73"
                                                      style={
                                                        Object {
                                                          "WebkitClipPath": "polygon(100% 100%, 100% 100%, 100% 100%)",
                                                          "clipPath": "polygon(100% 100%, 100% 100%, 100% 100%)",
                                                          "visibility": "hidden",
                                                        }
                                                      }
                                                    >
                                                      <SvgIcon
                                                        className="ToggleIcon-onIcon-73"
                                                        classes={
                                                          Object {
                                                            "colorAction": "MuiSvgIcon-colorAction-77",
                                                            "colorDisabled": "MuiSvgIcon-colorDisabled-79",
                                                            "colorError": "MuiSvgIcon-colorError-78",
                                                            "colorPrimary": "MuiSvgIcon-colorPrimary-75",
                                                            "colorSecondary": "MuiSvgIcon-colorSecondary-76",
                                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-80",
                                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-82",
                                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-81",
                                                            "root": "MuiSvgIcon-root-74",
                                                          }
                                                        }
                                                        color="inherit"
                                                        component="svg"
                                                        fontSize="default"
                                                        style={
                                                          Object {
                                                            "WebkitClipPath": "polygon(100% 100%, 100% 100%, 100% 100%)",
                                                            "clipPath": "polygon(100% 100%, 100% 100%, 100% 100%)",
                                                            "visibility": "hidden",
                                                          }
                                                        }
                                                        viewBox="0 0 24 24"
                                                      >
                                                        <svg
                                                          aria-hidden="true"
                                                          className="MuiSvgIcon-root-74 ToggleIcon-onIcon-73"
                                                          focusable="false"
                                                          role="presentation"
                                                          style={
                                                            Object {
                                                              "WebkitClipPath": "polygon(100% 100%, 100% 100%, 100% 100%)",
                                                              "clipPath": "polygon(100% 100%, 100% 100%, 100% 100%)",
                                                              "visibility": "hidden",
                                                            }
                                                          }
                                                          viewBox="0 0 24 24"
                                                        >
                                                          <path
                                                            d="M0 0h24v24H0z"
                                                            fill="none"
                                                          />
                                                          <path
                                                            d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"
                                                          />
                                                        </svg>
                                                      </SvgIcon>
                                                    </WithStyles(SvgIcon)>
                                                  </VisibilityIcon>
                                                </pure(VisibilityIcon)>
                                              </div>
                                            </ToggleIcon>
                                          </WithStyles(ToggleIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-87",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-88",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-89",
                                                  "ripple": "MuiTouchRipple-ripple-84",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-86",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-85",
                                                  "root": "MuiTouchRipple-root-83",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-83"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-83"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </InputAdornment>
                        </WithStyles(InputAdornment)>
                      </div>
                    </InputBase>
                  </WithFormControlContext(InputBase)>
                </WithStyles(WithFormControlContext(InputBase))>
              </OutlinedInput>
            </WithStyles(OutlinedInput)>
          </div>
        </FormControl>
      </WithStyles(FormControl)>
    </TextField>
  </PasswordField>
</WithStyles(PasswordField)>
`;
